
?start: program

?program: declaration_* eval

?declaration_: "\n"* (declaration | module | macro | data) "\n"*

declaration: NAME "::" expression

data: "data" NAME "::" expression

module: "module" NAME "::" "(" declaration_* ")"

macro: "{" NAME splice "}" "::" expression

splice: "~" NAME

?expression_: "\n"* expression "\n"*

expression: atom+
paren: "(" "\n"* ("\n"* atom "\n"*)+ "\n"* ")"

combinator: "{" "\n"* ("\n"* (atom | splice) "\n"*)+ "\n"* "}"

eval: "eval" "\n"* ("\n"* atom "\n"*)+ "\n"*

if: "if" "\n"* atom

ifelse: "if" "\n"* atom "\n"* "else" "\n"* atom

while: "while" "\n"* atom "\n"* "loop" "\n"* atom

array: "[" "\n"* ("\n"* (atom | NUMBER) "\n"*)+ "]" | "[" "\n"* "]"

symbol: ":" NAME

?atom: STRING
     | CHARACTER
     | OPERATOR
     | NAME
     | symbol
     | array
     | paren
     | combinator
     | if
     | ifelse
     | while
     | NUMBER

OPERATOR: /[+\-*\/!@#$%&;,?\=\|<>_.^][+\-*\/!@#$%;,?\=\|<>_.^:]*/

NAME: /[A-Z][a-zA-Z0-9\/]*/

CHARACTER: /'[^']'/
 
STRING: /"[^"]*"/

NUMBER: /-?\d+(\.\d+)?/

%ignore /[ \r\t]+/
