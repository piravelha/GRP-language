
Not :: :B match {
  if B case 0
  else 1
} ::

! :: Not ::

Max :: :N :M N match {
  if M < case M
  else N
} ::

=+= :: Max ::

Min :: :N :M N match {
  if M > case M
  else N
} ::

=-= :: Min ::

Range :: :Max :Min 
  [] :Acc
  while Min Max <=
  loop (
    Acc [Min] ++ :=Acc
    Min 1 + :=Min
  ) Acc
::

Indices :: :Xs
  1 :I [] :Acc
  (while I Xs # <=
  loop (Acc [I] ++) :=Acc
    (I 1 +) :=I)
  Acc
::

Reverse :: :List
  List # :I [] :Acc
  (while Acc # List # <
  loop (List I !! |_|)
    (Acc <|> ++) :=Acc
    (I 1 -) :=I)
  Acc
::

|_| :: :E [E] ::

<_> :: Reverse ::

{Map ~F} :: . match {
  if [] = case , []
  else
    (. /. {~F})
    (<|> /@ {Map ~F}) :>
} ::

{FlatMap ~F} :: . match {
  if [] = case , []
  else
    (. /. {~F})
    (<|> /@ {Map ~F}) ++
} ::

{ZipWith ~F} :: :Ys :Xs Ys match {
  if [] = case []
  else Xs match {
    if [] = case []
    else
      (Xs /. Ys /. {~F})
      (Xs /@ Ys /@ {ZipWith ~F}) :>
  }
} ::

MinRowLength ::
  {$> #} {<> Min}
::

Transpose :: :Matrix
  1 Matrix MinRowLength Range {$> :I
    Matrix I !! :Row
    Matrix %^ {$> :J
      Matrix J !! I !!
    }
  }
::

{TakeWhile ~F} :: . :Xs match {
  if [] = case []
  if /. {~F} Not case []
  else
    (Xs /.)
    (Xs /@ {TakeWhile ~F}) :>
} ::